Microsoft Windows [Version 10.0.19045.3208]
(c) Microsoft Corporation. All rights reserved.

C:\dockerPractiseFolder>javac Test.java

C:\dockerPractiseFolder>java Test
Hello World

C:\dockerPractiseFolder>docker build -t rach12/docker-helloworld .
[+] Building 0.1s (2/2) FINISHED                                                                         docker:default
 => [internal] load build definition from Dockerfile                                                               0.0s
 => => transferring dockerfile: 2B                                                                                 0.0s
 => [internal] load .dockerignore                                                                                  0.0s
 => => transferring context: 2B                                                                                    0.0s
ERROR: failed to solve: failed to read dockerfile: open /var/lib/docker/tmp/buildkit-mount3340492953/Dockerfile: no such file or directory


C:\dockerPractiseFolder>docker build -t rach12/docker-helloworld .
[+] Building 0.0s (0/0)                                                                                  docker:default
2023/08/04 12:38:50 http2: server: error reading preface from client //./pipe/docker_engine: file has already been close[+] Building 56.8s (10/10) FINISHED                                                                      docker:default
 => [internal] load build definition from Dockerfile                                                               0.0s
 => => transferring dockerfile: 139B                                                                               0.0s
 => [internal] load .dockerignore                                                                                  0.1s
 => => transferring context: 2B                                                                                    0.0s
 => [internal] load metadata for docker.io/library/openjdk:8                                                       6.4s
 => [auth] library/openjdk:pull token for registry-1.docker.io                                                     0.0s
 => [1/4] FROM docker.io/library/openjdk:8@sha256:86e863cc57215cfb181bd319736d0baf625fe8f150577f9eb58bd937f5452c  48.0s
 => => resolve docker.io/library/openjdk:8@sha256:86e863cc57215cfb181bd319736d0baf625fe8f150577f9eb58bd937f5452cb  0.0s
 => => sha256:86e863cc57215cfb181bd319736d0baf625fe8f150577f9eb58bd937f5452cb8 1.04kB / 1.04kB                     0.0s
 => => sha256:3af2ac94130765b73fc8f1b42ffc04f77996ed8210c297fcfa28ca880ff0a217 1.79kB / 1.79kB                     0.0s
 => => sha256:b273004037cc3af245d8e08cfbfa672b93ee7dcb289736c82d0b58936fb71702 7.81kB / 7.81kB                     0.0s
 => => sha256:001c52e26ad57e3b25b439ee0052f6692e5c0f2d5d982a00a8819ace5e521452 55.00MB / 55.00MB                  24.8s
 => => sha256:d9d4b9b6e964657da49910b495173d6c4f0d9bc47b3b44273cf82fd32723d165 5.16MB / 5.16MB                     5.0s
 => => sha256:2068746827ec1b043b571e4788693eab7e9b2a95301176512791f8c317a2816a 10.88MB / 10.88MB                   4.0s
 => => sha256:9daef329d35093868ef75ac8b7c6eb407fa53abbcb3a264c218c2ec7bca716e6 54.58MB / 54.58MB                  14.1s
 => => sha256:d85151f15b6683b98f21c3827ac545188b1849efb14a1049710ebc4692de3dd5 5.42MB / 5.42MB                    11.5s
 => => sha256:52a8c426d30b691c4f7e8c4b438901ddeb82ff80d4540d5bbd49986376d85cc9 210B / 210B                        11.9s
 => => sha256:8754a66e005039a091c5ad0319f055be393c7123717b1f6fee8647c338ff3ceb 105.92MB / 105.92MB                37.1s
 => => extracting sha256:001c52e26ad57e3b25b439ee0052f6692e5c0f2d5d982a00a8819ace5e521452                         10.3s
 => => extracting sha256:d9d4b9b6e964657da49910b495173d6c4f0d9bc47b3b44273cf82fd32723d165                          1.1s
 => => extracting sha256:2068746827ec1b043b571e4788693eab7e9b2a95301176512791f8c317a2816a                          0.6s
 => => extracting sha256:9daef329d35093868ef75ac8b7c6eb407fa53abbcb3a264c218c2ec7bca716e6                          5.4s
 => => extracting sha256:d85151f15b6683b98f21c3827ac545188b1849efb14a1049710ebc4692de3dd5                          0.4s
 => => extracting sha256:52a8c426d30b691c4f7e8c4b438901ddeb82ff80d4540d5bbd49986376d85cc9                          0.0s
 => => extracting sha256:8754a66e005039a091c5ad0319f055be393c7123717b1f6fee8647c338ff3ceb                          3.6s
 => [internal] load build context                                                                                  0.1s
 => => transferring context: 738B                                                                                  0.0s
 => [2/4] WORKDIR /app                                                                                             0.5s
 => [3/4] COPY . /app/                                                                                             0.1s
 => [4/4] RUN javac Test.java                                                                                      1.2s
 => exporting to image                                                                                             0.2s
 => => exporting layers                                                                                            0.2s
 => => writing image sha256:393ad5206f394adad10ee6bedede9e833039c5f23e5d3978993e44febab92c97                       0.0s
 => => naming to docker.io/rach12/docker-helloworld                                                                0.0s

What's Next?
  View summary of image vulnerabilities and recommendations â†’ docker scout quickview

C:\dockerPractiseFolder>docker run rach12/docker-helloworld .
Hello World

C:\dockerPractiseFolder>docker images
REPOSITORY                 TAG       IMAGE ID       CREATED          SIZE
rach12/docker-helloworld   latest    393ad5206f39   32 seconds ago   526MB

C:\dockerPractiseFolder>docker ps -a
CONTAINER ID   IMAGE                      COMMAND         CREATED          STATUS                      PORTS     NAMES
c3f0b9eb48a7   rach12/docker-helloworld   "java Test ."   24 seconds ago   Exited (0) 22 seconds ago             friendly_brown

C:\dockerPractiseFolder>docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
----------------------------------------------------------------------------------------------------
1) pull the mysql image
2) create a network between mysql and spring boot
3) run mysql container in network
4) check the create db
5) update the application.properties file
6) build spring boot docker image
7) start spring boot container on same network